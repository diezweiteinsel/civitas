# Application model for managing application-related data and logic

from datetime import datetime # stdlib
from enum import StrEnum

from pydantic import BaseModel, Field #3rdparty

from .form import Form #our stuff

class ApplicationStatus(StrEnum):
    PENDING = "PENDING"
    APPROVED = "APPROVED"
    REJECTED = "REJECTED"
    REVISED = "REVISED"

class Snapshots(BaseModel):
    previousSnapshotID: int | None = None
    currentSnapshotID: int = -1
    nextSnapshotID: int | None = None

    def to_json(self) -> str:
        return self.model_dump_json(indent=2)

    @classmethod
    def from_json(cls, json_str: str) -> "Snapshots":
        return cls.model_validate_json(json_str)


class Application(BaseModel):
    """A class representing an application submitted by a user.
    id: primary key in db, generated by db
    user_id: id of user who submitted the application
    form_id: id of form which the application belongs to
    admin_id: id of the admin who last reviewed the application
    currentSnapshotID: points to the id of the latest snapshot of this application
    previousSnapshotID: points to the id of the previous snapshot of this application
    jsonPayload: Contains label-value pairs, a label represents one field in a form which can be filled out
    """
    id: int | None = None
    user_id: int
    form_id: int
    admin_id: int | None = None
    status: ApplicationStatus = ApplicationStatus.PENDING
    created_at: datetime = Field(default_factory=datetime.now)
    snapshots: Snapshots = Field(default_factory=Snapshots)
    jsonPayload: dict = {}  # The actual data of the application
    is_public: bool = False  # Indicates if the application is public



class ApplicationID(BaseModel):
    id: int


class ApplicationFillout(BaseModel):
  #  user_id: int | None # TODO remove in front adn backend
    form_id: int
    payload: dict


class ApplicationResponseItem(BaseModel):
    id: int
    form_id: int
    title: str
    status: ApplicationStatus
    created_at: datetime
    is_public: bool
    snapshots: Snapshots
    jsonPayload: dict
    


def application_to_response_item(application: Application) -> ApplicationResponseItem:

    newJson = {}
    for key, block in application.jsonPayload.items():
        newJson[block["label"]] = block["value"]
    
    return ApplicationResponseItem(
        id=application.id,
        form_id=application.form_id,
        title="",
        status=application.status,
        created_at=application.created_at,
        is_public=application.is_public,
        snapshots=application.snapshots,
        jsonPayload=newJson
    )


class ApplicationUpdate(BaseModel):
    form_id: int
    application_id: int
    payload: dict