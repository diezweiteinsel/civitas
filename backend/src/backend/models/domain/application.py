# Application model for managing application-related data and logic

from datetime import datetime # stdlib
from enum import StrEnum

from pydantic import BaseModel, Field #3rdparty

from .form import Form #our stuff

class ApplicationStatus(StrEnum):
    PENDING = "PENDING"
    APPROVED = "APPROVED"
    REJECTED = "REJECTED"
    REVISED = "REVISED"



class Application(BaseModel):
    """A class representing an application submitted by a user.
    id: primary key in db, generated by db
    user_id: id of user who submitted the application
    form_id: id of form which the application belongs to
    admin_id: id of the admin who last reviewed the application
    currentSnapshotID: points to the id of the latest snapshot of this application
    previousSnapshotID: points to the id of the previous snapshot of this application
    jsonPayload: Contains label-value pairs, a label represents one field in a form which can be filled out
    """
    id: int | None = None
    user_id: int
    form_id: int
    admin_id: int | None = None
    status: ApplicationStatus = ApplicationStatus.PENDING
    created_at: datetime = Field(default_factory=datetime.now)
    currentSnapshotID: int = -1  # Points to the latest snapshot of the application
    previousSnapshotID: int = -1  # Points to the previous snapshot of the application
    jsonPayload: dict = {}  # The actual data of the application
    is_public: bool = False  # Indicates if the application is public


class ApplicationID(BaseModel):
    id: int


class ApplicationFillout(BaseModel):
    user_id: int | None # TODO remove in front adn backend
    form_id: int
    payload: dict